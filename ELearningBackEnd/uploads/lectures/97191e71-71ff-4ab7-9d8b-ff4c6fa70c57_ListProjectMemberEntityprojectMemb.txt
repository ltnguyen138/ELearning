  List<ProjectMemberEntity> projectMemberEntities = projectMemberRepository.findByTeam_IdAndProject_Company_Id(id, user.getCompanyId());
        projectMemberRepository.deleteAll(projectMemberEntities);

        List<WorkspaceMembersEntity> workspaceMembersEntities =
                workspaceMembersRepository.findByTeam_IdAndWorkspace_Company_Id(id, user.getCompanyId());
        workspaceMembersRepository.deleteAll(workspaceMembersEntities);

        List<HiringBoardMemberEntity> hiringBoardMemberEntities =
                hiringBoardMemberRepository.findByTeam_IdAndHiringBoard_Company_Id(id, user.getCompanyId());
        hiringBoardMemberRepository.deleteAll(hiringBoardMemberEntities);

        List<PoliciesMembersEntity> policiesMembersEntities =
                policiesMembersRepository.findByTeam_IdAndPolicyEntity_Company_Id(id, user.getCompanyId());
        policiesMembersRepository.deleteAll(policiesMembersEntities);

        List<PayrollSchedule> payrollSchedules = payrollScheduleRepository.findBySalaryProfile_Company_Id(user.getCompanyId());
        payrollSchedules = payrollSchedules.stream()
                .filter(e -> e.getTeams()!=null && e.getTeams().contains(id))
                .map(schedule -> {
                    schedule.getTeams().remove(id);
                    return schedule;
                }).collect(Collectors.toList());
        payrollScheduleRepository.saveAll(payrollSchedules);



        List<Payroll> payrolls = payrollRepository.findByteamId(id);
        payrolls.stream().map(payroll -> {
            payroll.getTeams().remove(entity.getId()  );
            return payroll;
        }).collect(Collectors.toList());


select * from hrm_payroll_schedule s inner join hrm_payroll_salary_profile sa on s.profile_id = sa.id
inner join companies co on sa.company_id=co.id where 960 = ANY (s.teams) and co.id = 901